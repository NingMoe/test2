https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
http://www.cnblogs.com/tugenhua0707/p/4050072.html

git pull --rebase origin master

git config --global user.name "吕成铭"
git config --global user.email "lvchengming@hunuo.com"
git config --global user.password "123456789"
git config --global user.name "publicfame"
git config --global user.email "public@jyfame.com"
git config --global user.password "a123456"

git config --global user.name "cenzhihong"
git config --global user.email "zhihong@hunuo.com"
git config --global user.password "czh10173771"

git clone git@192.168.0.53:root/zhidafangzhi.git
git remote add origin git@192.168.0.53:root/zhidafangzhi.git
git remote add origin git@192.168.0.53:root/guanyuanpiju.git
git branch xxx
git checkout xxx
git add .
git commit -m 'ss'
git merge master
git pull
git push origin master



 一 、
设置Git的user name和email：
$ git config --global user.name "吕成铭"
$ git config --global user.email "lvchengming@hunuo.com"
二、生成SSH密钥过程：
1.查看是否已经有了ssh密钥：cd ~/.ssh
如果没有密钥则不会有此文件夹，有则备份删除
2.生存密钥：
    $ ssh-keygen -t rsa -C "lvchengming@hunuo.com"
    按3个回车，密码为空。
    Your identification has been saved in /home/tekkub/.ssh/id_rsa.
    Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.
    The key fingerprint is:
    ………………
最后得到了两个文件：id_rsa和id_rsa.pub
3.添加密钥到ssh：ssh-add 文件名
需要之前输入密码。
4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。
打开https://github.com/ ，登陆xuhaiyan825，然后添加ssh。
5.测试：ssh git@github.com
    The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.
    RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
    Are you sure you want to continue connecting (yes/no)? yes
    Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.
    ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access
    Connection to github.com closed.
三、 开始使用github
1.获取源码：
$ git clone git@github.com:billyanyteen/github-services.git
2.这样你的机器上就有一个repo了。
3.git于svn所不同的是git是分布式的，没有服务器概念。所有的人的机器上都有一个repo，每次提交都是给自己机器的repo
仓库初始化：
git init
生成快照并存入项目索引：
git add
文件,还有git rm,git mv等等…
项目索引提交：
git commit -m “填写日志”
4.协作编程：
将本地repo于远程的origin的repo合并，
推送本地更新到远程：
git push origin master
更新远程更新到本地：
git pull origin master
补充：
添加远端repo：
$ git remote add upstream git://github.com/pjhyett/github-services.git
重命名远端repo：
$ git://github.com/pjhyett/github-services.git为“upstream”





git --version  查看是否安装git以及git版本

Mac：Xcode默认安装了git
Debian或Ubuntu，通过命令sudo apt-get install git就可以直接完成Git的安装
Windows：msysgit是Windows版的Git，从https://git-for-windows.github.io/下载，默认安装即可


安装git后首次需要配置，配置后每次提交Git会自动使用上面的配置信息，这样每一次提交才知道是谁提交的
git config --list 可查看git配置
git config --global user.name "lvchengming"
git config --global user.email "lvchengming@hunuo.com"
git config --global user.name "publicfame"
git config --global user.email "publicfame@hunuo.com"

git clone git@192.168.0.53:root/zhidafangzhi.git
git remote add origin git@192.168.0.53:root/zhidafangzhi.git
git remote add origin https://github.com/servicejy/test2.git

3.1.通过git init命令把目录变成Git可以管理的仓库,如创建了gittest目录，进入gittest目录执行git init将其变成Git可以管理的仓库
使用 ls –la 查看隐藏文件，可以看到 .git 目录，这个目录是Git来跟踪管理版本库,config文件可以查看仓库配置.

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

命令git add，把工作区文件添加到暂缓区：
    git add . (“.”表示所有文件)
命令git commit告诉Git，把文件提交到仓库：
    git commit -m “填写日志”
  提交的日志信息是必须得写的。


  要关联一个远程库，使用命令git remote add origin git@192.168.0.53:zhengyi/gittest.git；
关联后，才可以让本地仓库和远程仓库保持数据统一；
git remote add origin git@192.168.0.53:zhidafangzhi/zhidafangzhi.git
git remote add origin https://github.com/servicejy/test2.git

拉取文件与提交文件

git pull  拉取更新远程仓库文件到本地仓库
   
git push 将本地修改的文件推送更新到远程仓库

备注：如有AB两个开发者，A修改了内容先push推送到远程仓库，B就需要先pull一次更新到最新内容，才可以执行push推送内容到远程。如果不执行pull拉取内容是无法push推送成功的，建议每次执行push操作之前，先执行一次pull拉取操作。

3.3 版本控制

git status 命令 查看仓库当前的状态
   一般仓库中的文件可能存在于这三种状态：
    1）Untracked files → 文件未被跟踪；
    2）Changes to be committed → 文件已暂存，这是下次提交的内容；
    3) Changes but not updated → 文件被修改，但并没有添加到暂存区。如果 commit 时没有带 -a 选项，这个状态下的文件不会被提交。 

查看历史提交记录
使用git log命令显示从最近到最远的提交日志, 查看现在版本库的状态


回退历史版本
使用git reset 命令回退到以前的版本
强制删除工作区内容可使用命令：git reset -- hard


4.gitlab 添加 SSH Key

如果~/.ssh目录下未生成id_rsa.pub 公钥文件，使用命令 ssh-keygen -t rsa生成公钥文件。
将~/.ssh目录下有id_rsa.pub 公钥文件，使用cat id_rsa.pub 命令查看公钥将公钥复制到下面。

4.2从远程库克隆

使用git clone命令克隆一个仓库
git clone git clone git@192.168.0.53:zhengyi/gittest.git
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

5.分支管理

查看本地分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

单人开发

新建dev分支，每次开发都在dev分支上开发，功能稳定后再合并到master分支，保证master分支版本的稳定性。单人开发一般不会出现合并冲突
命令：add - commit – pull - push

gitlab 为仓库添加协助开发者（要赋予组长或者项目负责人权限）

1.个人新建各自分支，每次提交到各自分支。操作步骤：add - commit – pull – push
2.当需要合并版本时，A先checkout到master分支，pull一次更新master分支代码，然后执行命令 git merge abranch 合并A分支到主分支，最后push推送新合并的内容到远程
2.更新后B执行一遍A操作，如果这时出现冲突，先手动解决冲突再push到master分支
3.合并后master为最新版本，AB各自切换回各自的分支，执行git merge master合并master分支的内容到各自分支，更新到最新版本



git add   将工作文件修改提交到本地暂存区 
git commit   提交暂存区到仓库区
git pull     拉取远程仓库内容更新并合并到本地
git push  推送本地仓库内容合并到远程仓库

git reset  恢复文件 版本回滚
git log     查看每次提交记录
git branch       查看分支 
git checkout    切换分支
git merge        合并分支






查看、添加、提交、删除、找回，重置修改文件
git help <command> # 显示command的help
git show # 显示某次提交的内容 git show $id
git co -- <file> # 抛弃工作区修改
git co . # 抛弃工作区修改
git add <file> # 将工作文件修改提交到本地暂存区
git add . # 将所有修改过的工作文件提交暂存区
git rm <file> # 从版本库中删除文件
git rm <file> --cached # 从版本库中删除文件，但不删除文件
git reset <file> # 从暂存区恢复到工作文件
git reset -- . # 从暂存区恢复到工作文件
git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
git ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am "some comments"
git ci --amend # 修改最后一次提交记录
git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象
git revert HEAD # 恢复最后一次提交的状态
查看文件diff
git diff <file> # 比较当前文件和暂存区文件差异 git diff
git diff <id1><
id2> # 比较两次提交之间的差异
git diff <branch1>..<branch2> # 在两个分支之间比较
git diff --staged # 比较暂存区和版本库差异
git diff --cached # 比较暂存区和版本库差异
git diff --stat # 仅仅比较统计信息
查看提交记录
git log git log <file> # 查看该文件每次提交记录
git log -p <file> # 查看每次详细修改内容的diff
git log -p -2 # 查看最近两次详细修改内容的diff
git log --stat #查看提交统计信息
tig
Mac上可以使用tig代替diff和log，brew install tig
Git 本地分支管理
查看、切换、创建和删除分支
git br -r # 查看远程分支
git br <new_branch> # 创建新的分支
git br -v # 查看各个分支最后提交信息
git br --merged # 查看已经被合并到当前分支的分支
git br --no-merged # 查看尚未被合并到当前分支的分支
git co <branch> # 切换到某个分支
git co -b <new_branch> # 创建新的分支，并且切换过去
git co -b <new_branch> <branch> # 基于branch创建新的new_branch
git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支
git br -d <branch> # 删除某个分支
git br -D <branch> # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
 分支合并和rebase
git merge <branch> # 将branch分支合并到当前分支
git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交
git rebase master <branch> # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>
 Git补丁管理(方便在多台机器上开发同步时用)
git diff > ../sync.patch # 生成补丁
git apply ../sync.patch # 打补丁
git apply --check ../sync.patch #测试补丁能否成功
 Git暂存管理
git stash # 暂存
git stash list # 列所有stash
git stash apply # 恢复暂存的内容
git stash drop # 删除暂存区
Git远程分支管理
git pull # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin # 抓取远程仓库更新
git merge origin/master # 将远程主分支合并到本地当前分支
git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支
git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上
git push # push所有分支
git push origin master # 将本地主分支推到远程主分支
git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin <local_branch> # 创建远程分支， origin是远程仓库名
git push origin <local_branch>:<remote_branch> # 创建远程分支
git push origin :<remote_branch> #先删除本地分支(git br -d <branch>)，然后再push删除远程分支
Git远程仓库管理
GitHub
git remote -v # 查看远程服务器地址和仓库名称
git remote show origin # 查看远程服务器仓库状态
git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址
git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm <repository> # 删除远程仓库
创建远程仓库
git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上
mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库
git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址
git push -u origin master # 客户端首次提交
git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track
git remote set-head origin master # 设置远程仓库的HEAD指向master分支
也可以命令设置跟踪远程库和本地库
git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop